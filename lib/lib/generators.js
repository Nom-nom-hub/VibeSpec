"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.writeOutput = exports.getGenerator = exports.generateText = exports.generateMarkdown = void 0;
const fs = __importStar(require("fs-extra"));
const path = __importStar(require("path"));
/**
 * Markdown generator for spec.yaml
 */
const generateMarkdown = (spec) => {
    let output = '';
    // Header
    output += `# ${spec.project || 'Unnamed Project'}\n\n`;
    if (spec.version) {
        output += `**Version:** ${spec.version}\n\n`;
    }
    if (spec.description) {
        output += `${spec.description}\n\n`;
    }
    // Goals
    if (spec.goals && spec.goals.length > 0) {
        output += '## 🎯 Goals\n\n';
        spec.goals.forEach((goal, index) => {
            output += `${index + 1}. ${goal}\n`;
        });
        output += '\n';
    }
    // Constraints
    if (spec.constraints && spec.constraints.length > 0) {
        output += '## ⚠️ Constraints\n\n';
        spec.constraints.forEach((constraint, index) => {
            output += `• ${constraint}\n`;
        });
        output += '\n';
    }
    // Features
    if (spec.features && spec.features.length > 0) {
        output += '## 🚀 Features\n\n';
        spec.features.forEach((feature, index) => {
            output += `### ${index + 1}. ${feature.name}\n\n`;
            if (feature.description) {
                output += `${feature.description}\n\n`;
            }
            // Requirements
            if (feature.requirements && feature.requirements.length > 0) {
                output += '#### Requirements\n\n';
                feature.requirements.forEach((req, reqIndex) => {
                    output += `• ${req}\n`;
                });
                output += '\n';
            }
            // Flows
            if (feature.flows && feature.flows.length > 0) {
                output += '#### Implementation Flows\n\n';
                feature.flows.forEach((flow) => {
                    output += `**${flow.name}**\n\n`;
                    if (flow.steps && flow.steps.length > 0) {
                        flow.steps.forEach((step, stepIndex) => {
                            output += `${stepIndex + 1}. ${step}\n`;
                        });
                    }
                    else {
                        output += '*No steps defined*\n';
                    }
                    output += '\n';
                });
            }
        });
        output += '\n';
    }
    // Footer
    output += '*Generated by VibeSpec*\n';
    return output;
};
exports.generateMarkdown = generateMarkdown;
/**
 * Plain text generator for spec.yaml
 */
const generateText = (spec) => {
    let output = '';
    // Header
    const header = spec.project || 'Unnamed Project';
    output += '='.repeat(header.length + 4) + '\n';
    output += `  ${header}\n`;
    output += '='.repeat(header.length + 4) + '\n\n';
    if (spec.version) {
        output += `Version: ${spec.version}\n`;
    }
    if (spec.description) {
        output += `\n${spec.description}\n\n`;
    }
    // Goals
    if (spec.goals && spec.goals.length > 0) {
        output += 'GOALS\n';
        output += '-'.repeat(5) + '\n';
        spec.goals.forEach((goal, index) => {
            output += `${index + 1}. ${goal}\n`;
        });
        output += '\n';
    }
    // Constraints
    if (spec.constraints && spec.constraints.length > 0) {
        output += 'CONSTRAINTS\n';
        output += '-'.repeat(11) + '\n';
        spec.constraints.forEach((constraint, index) => {
            output += `• ${constraint}\n`;
        });
        output += '\n';
    }
    // Features
    if (spec.features && spec.features.length > 0) {
        output += 'FEATURES\n';
        output += '-'.repeat(8) + '\n';
        spec.features.forEach((feature, index) => {
            output += `${index + 1}. ${feature.name}\n`;
            output += '-'.repeat(feature.name.length + (index + 1).toString().length + 2) + '\n';
            if (feature.description) {
                output += `${feature.description}\n\n`;
            }
            // Requirements
            if (feature.requirements && feature.requirements.length > 0) {
                output += '  Requirements:\n';
                feature.requirements.forEach((req, reqIndex) => {
                    output += `    ${reqIndex + 1}. ${req}\n`;
                });
                output += '\n';
            }
            // Flows
            if (feature.flows && feature.flows.length > 0) {
                output += '  Implementation Flows:\n';
                feature.flows.forEach((flow, flowIndex) => {
                    output += `    ${flow.name}:\n`;
                    if (flow.steps && flow.steps.length > 0) {
                        flow.steps.forEach((step, stepIndex) => {
                            output += `      ${stepIndex + 1}. ${step}\n`;
                        });
                    }
                    else {
                        output += `      (No steps defined)\n`;
                    }
                    output += '\n';
                });
                output += '\n';
            }
        });
        output += '='.repeat(50) + '\n';
    }
    output += '\nGenerated by VibeSpec\n';
    return output;
};
exports.generateText = generateText;
/**
 * Get generator function by format
 */
const getGenerator = (format) => {
    switch (format.toLowerCase()) {
        case 'markdown':
        case 'md':
            return exports.generateMarkdown;
        case 'text':
        case 'txt':
            return exports.generateText;
        default:
            throw new Error(`Unsupported format: ${format}. Supported: md, txt`);
    }
};
exports.getGenerator = getGenerator;
/**
 * Write generated output to file or directory
 */
const writeOutput = async (content, spec, outputPath, format = 'md') => {
    if (!outputPath) {
        // Output to stdout
        console.log(content);
        return;
    }
    let filePath;
    // If outputPath is a directory, create filename based on project name
    const stats = await fs.stat(outputPath).catch(() => null);
    if (stats?.isDirectory()) {
        const projectName = (spec.project || 'project').toLowerCase().replace(/[^a-z0-9]/g, '-');
        const extension = format === 'md' ? 'md' : 'txt';
        filePath = path.join(outputPath, `${projectName}-spec.${extension}`);
    }
    else {
        filePath = outputPath;
    }
    // Ensure directory exists
    await fs.ensureDir(path.dirname(filePath));
    // Write the file
    await fs.writeFile(filePath, content);
};
exports.writeOutput = writeOutput;
